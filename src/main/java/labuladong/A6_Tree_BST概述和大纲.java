/**
 * Hailiang.com Inc.
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package labuladong;

/**
 * @author Baojiang Yang
 * @version : A6_Tree_BST概述和大纲.java, v 0.1 2023年11月18日 18:03  Baojiang Yang Exp $
 */
public class A6_Tree_BST概述和大纲 {
    /**
     * BST练习题
     *
     * 一.普通二叉树的思路
     *  1.是都可以遍历一遍出结果?(回溯)
     *    如果可以,再考虑: a.对于每一个节点,你应该做什么
     *                   b.你应该在什么时候做
     *    如果不可以通过遍历得解,再考虑:
     *  2.时是否可以把原子问题分解为子问题?(动态规划,分治)
     *    a.明确这个递归函数的定义,然后利用这个定义.利用子问题的结果推迟原问题的结果
     *
     * 二.优化算法的核心
     *  1.充分利用信息
     *      比如给你一颗二叉树,或者给一颗BST,要充分利用数据结构的特性来结题,比如BST的中序遍历是有序的等
     *  2.消除冗余计算
     *      比如动态规划,借助备忘录,消除重复计算
     *
     * 三.对于数据结构的操作
     *  1.遍历
     *  2.访问
     *  无论是增删查改,都是遍历+访问
     *  BST特性是遍历的时候非常的快,因为树高是Olog(n),所以遍历的复杂度就是Olog(n)
     *
     */

}