/**
 * Hailiang.com Inc.
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package labuladong;

/**
 * @author Baojiang Yang
 * @version : A2_Tree_DFS和BFS的总结.java, v 0.1 2023年11月18日 17:59  Baojiang Yang Exp $
 */
public class A2_Tree_DFS和BFS的总结 {
    /**
     * traverse 遍历
     * 考虑2个问题
     * 1.当前节点需要做什么事情?
     * 2.在什么时候去做?
     *
     * 总结:
     * 1.递归可以理解为一个指针
     * 	递归过程就是指针游走的过程,他是一个固定的过程,和前中后序遍历无关
     * 2.前中后序只是递归过程中3个特殊的时间点
     * 	 进入前:前序, 左子树遍历完准备切换到右子树: 中序, 离开这个节点: 后序
     * 3.二叉树的遍历算法需要考虑2个问题
     * 	当前节点需要做什么事情?
     * 	在什么时候去做?
     * 4.二叉树的遍历算法分两大类
     * 	第一类是遍历二叉树就能解决的问题: 比如前序做选择,后序撤销选择->回溯思想
     * 	第二类是要把大的问题分解成结构相同的小的子问题来逐个击破: 动态规划和分支算法
     */


    /**
     * 1.DFS的时间复杂度是0(n),BFS也是0(n)
     * 2.DFS空间复杂度O(n),BFS是O(2的n次方),因为节点会指数级的增长
     * 3.虽然BFS的时间复杂度也是O(n),但在最小深度的算法中实际遍历过程遇到第一个叶子结点就能得到解法提前结束,而DFS必须全部递归完成才知道最小深度
     */
}