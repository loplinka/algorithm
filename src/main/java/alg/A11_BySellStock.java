package alg; /**
 * Alipay.com Inc.
 * Copyright (c) 2004-2022 All Rights Reserved.
 */

/**
 * 给定一个数组 prices ，它的第?i 个元素?prices[i] 表示一支给定股票第 i 天的价格。
 * 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
 * 返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
 *
 * ?
 *
 * 示例 1：
 *
 * 输入：[7,1,5,3,6,4]
 * 输出：5
 * 解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
 *      注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
 * 示例 2：
 *
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这种情况下, 没有交易完成, 所以最大利润为 0。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author baojiang
 * @version 买卖股票问题: alg.A11_BySellStock.java, v 0.1 2022年10月04日 下午5:28 baojiang Exp $
 */
public class A11_BySellStock {

    public static void main(String[] args) {
        int[] prices  = new int[]{7,1,5,3,6,4};
        System.out.println(Solution2.maxProfit(prices));
    }

    static class Solution1 {
        public static int maxProfit(int[] prices) {
            // 最大利润中间变量
            int maxprofit = 0;
            // 从第0个价格开始迭代n-1次
            for (int i = 0; i < prices.length - 1; i++) {
                // 从第1个价格开始迭代
                for (int j = i + 1; j < prices.length; j++) {
                    // 利润=后卖出价格 - 前买入价格
                    int profit = prices[j] - prices[i];
                    if (profit > maxprofit) {
                        maxprofit = profit;
                    }
                }
            }
            return maxprofit;
        }
    }

    /**
     * 一次遍历
     * 中间变量记录最低价格minprice,
     * 如果迭代不是最低价格,就用prices[i]-minprice得到maxProfit
     */
    static class Solution2 {
        public static int maxProfit(int prices[]) {
            //变量记录一个历史最低价格
            int minprice = Integer.MAX_VALUE;
            int maxprofit = 0;
            for (int i = 0; i < prices.length; i++) {
                // 要么是低价
                if (prices[i] < minprice) {
                    minprice = prices[i];
                    System.out.println("minprice=" + minprice);
                }
                // 要么不是,就可以用来算收益
                else if (prices[i] - minprice > maxprofit) {
                    maxprofit = prices[i] - minprice;
                    System.out.println("maxprofit=" + maxprofit);
                }
            }
            return maxprofit;
        }
    }



}