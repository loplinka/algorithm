/**
 * Hailiang.com Inc.
 * Copyright (c) 2004-2024 All Rights Reserved.
 */
package practice;

/**
 * @author Baojiang Yang
 * @version : A9_Z_八股文.java, v 0.1 2024年01月01日 12:14  Baojiang Yang Exp $
 */
public class A9_Z_八股文 {

    /**
     * MySQL
     * 一.存储引擎
     *  1.InnoDB和MyISAM
     *  2.MySQL InnoDB v5.5.5 之后是默认,
     *  3.MySQL 存储引擎采用的是 插件式架构 ，支持多种存储引擎，可以为不同的数据库表设置不同的存储引擎以适应不同场景的需要。
     *  4.存储引擎是基于表的，而不是数据库
     *  5.区别
     *      #是否支持行级锁
     *          InnoDB支持,MyISAM不支持,只有表级
     *      #是否支持事务
     *          InnoDB支持,MyISAM不支持,实现了SQL标准定义了四个隔离级别(读未提交,读已提交,可重复读和串行化)，具有提交(commit)和回滚(rollback)事务的能力。
     *          并且，InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生
     *      #是否支持外键
     *          InnoDB 支持,MyISAM不支持
     *      #是否支持数据库异常崩溃后的安全恢复
     *          InnoDB 支持,MyISAM不支持
     *      #是否支持MVCC
     *          InnoDB 支持,MyISAM不支持
     *      #索引实现不一样
     *          虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。
     *
     * 二.索引
     *  1.BST: 不平衡,查询复杂度在O(n)~O(lgn)之间,分别是BST和链表
     *  2.AVL: 平衡,高度差不超1,查找,插入和删除复杂度平均都是O(lgn),但是旋转耗时,删除时效率低下,复杂度是O(lgn)
     *  3.RBT: 红黑树,解决了旋转问题,复杂度降到O(1),但是树太高,被HashMap和TreeMap等使用,但是并不适合MySQL等有磁盘IO的场景
     *  4.B树: 解决了磁盘IO问题
     *      首先定义了B树最重要的概念,阶数(Order)
     *      1.矮胖子,树高低,所以适合磁盘IO
     *      2.每个非叶子节点可以有多个子树
     *      3.有局部性原理: 一个数据被访问时候,附近的数据有较大概率被使用,会被加载到缓存中待用,无需IO,MongoDB使用了B树
     *      4.每个节点都存储真实是数据,且key不重复存储
     *      5.非叶子节点,记录树比子节点少1
     *  和B+树的区别
     *      1.前者都存储真实数据,后者只有叶子节点存储真实数据
     *      2.前者记录不会重复出现,后者可以重复出现,一定会出现在叶子节点也可能出现在非叶子节点
     *      3.后者叶子节点通过双向链表链接,方便检索
     *      4.前者非叶子节点,记录数比子节点少1,而后者相同
     *  从而相比之下,B+树具有以下优势
     *  5.B+树:
     *      1.更少的磁盘IO:B+树的非叶子节点不存数据而存储key,所以每个节点记录数比B树大很多,即阶数更大,树高更低,更适合磁盘IO
     *          此外,由于每个节点的存储的key更多,局部性原理也更好,缓存命中率也更高
     *      2.跟适合范围查找,因为只需要对链表进行遍历即可,而B树需要先找到下限,再对对数进行遍历找上限
     *      3.更稳定的查询效率:B的查询复杂度在1到书高之间,而B+树则稳定为数高,因为所有数据都在叶子节点
     *
     *
     * 三.事务
     *
     * 四.优化
     *
     * 五.日志
     *
     *
     *
     *
     * Redis,
     *
     *
     *
     * ElasticSearch
     *
     *
     *
     * kafuka
     *
     *
     *
     * scheduler
     *
     *
     *
     *
     */
}