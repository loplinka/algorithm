/**
 * Hailiang.com Inc.
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package practice;

/**
 * @author Baojiang Yang
 * @version : A9_RiskMng_总结.java, v 0.1 2023年11月19日 13:25  Baojiang Yang Exp $
 */
public class A9_RiskMng_总结 {

    /**
     * 贷款的要素: 准入,额度,利率/费率,期限(支用期限和授信有效期),还款方式 等
     *
     * 生命周期:
     * 一.贷前:审批
     * 二.贷中:交易
     * 三.贷后:催收,资金、资产,对账、核销、征信上报等
     *
     * 风控贯穿整个生命周期,贷前贷中贷后(催收预警)都有风控
     * 什么是风控(Risk Management): 银行宏观的风控有信用风险管理、市场风险管理、流动性风险管理、操作风险管理以及合规性风险管理等,我们信贷系统的风控主要是信用风险管理
     * 如何风控:1.人员: 政策风控人员,技术实现人员; 2.政策出规则,技术来实现
     *
     *
     * 做信贷,就围绕两个目标:
     * 1.业务上是余额目标
     * 2.技术上是双十一大促目标
     *
     *
     * 做的事情:
     * 一.40%技术翻译政策规则(技术使用Java,Drools,离线用大数据),以实时模型的方式为服务上游交易等业务
     *      <特点:快速,准确,高效>
     *
     *     A:如何保证实时模型的计算高效性?
     *      1.数据先加工,后使用,按照人维度进行加工或者采集,落到本地库去(DAO 就是3-5ms)
     *      2.计算规则加载到内存中,仅输入数据,然后内存if else的路由
     *      3.减少多次DAO,避免出现RPC,跨库,跨机房等耗时或者不稳定的操作
     *
     *     B:如何保证规则上线的准确性?
     *     实时规则:
     *     1.规则上线前,开发进行单元测试,保证单元测试覆盖率100%
     *     2.规则上线后,使用正常流量进行副本Beta,让验证结果落地成日志然后回流到离线,政策整体验证结果是否符合预期
     *     3.AB表机制: 同一个库的两条AB机制,每个模型都有一个AB两条配置,他们的生效是互斥的,同一个事务保证的数据的一致性,这样可以保证模型发布过程中可以做到AB切换
     *          并且配置数据中还有灰度配置,比如1%,2%等等,并且配合监控环比预警,确保模型不会立马100%切换倒是影响范围大,
     *          并且AB灰度切换过程中及其以后24小时内,不允许再升级模型,确保最后可以一键回滚到上一个版本
     *
     *     离线规则:
     *     1.开发规则,直接用生产数据作为输入,跑出结果,政策人员进行线下验证,此时保证和上线后效果是一样的
     *     2.发布上线,灰度切换生效; AB表切换,具备一键回滚能力;
     *     注意: 规则准确性是相对全量客户,或者说离线全量数据而言的,类似公关经济学,单个case或者所有case都符合预期,全局来不看不一定是正确的,一定要相对所有数据而言在预期范围内才是真去的,这点很重要,因为信用风险管理最终目前还是保增长,控不良
     *
     *
     *
     * 二.30%产品的业务迭代: 上线一款房抵贷产品等
     *     C1: <特点:综合产品能力,头狼落地能力> ?
     *      代表项目: 房抵贷
     *      特点就是理解业务,和北京贷前团队配合,我从渠道,到交易,到决策,到底层风控模型,全链路开发,最终交付上线
     *
     *     C:在美团做得事情,核心领域模型建设?
     *     1.没有数据加工,没有模型规则开发,只有实时业务系统接手到授信申请请求(进件)跑模型,得到结果向交易系统提供
     *     2.原因:一个企业文化不一样,按照传统银行来算的,模型对我们风控团队来说是黑盒; 离线大数据能力非常薄弱,因为没有数据源来作为授信依据,所以只能实时跑模型,严重依赖征信; 风控等基础非常薄弱,起码20年时候还非常薄弱
     *           注意:是黑盒风控规则还是开放的规则开发,没有绝对的对和错,公司处理不同的发展阶段,业务形态或者技术形态是不一样的,但主要服务了服务业务都是对的;
     *     3.我曾经试图想了解我们研发进行规则开发的可能,但是最后确定没有可能性,最终可能因为他们风控觉得政策规则是风控核心机密不让政策以外的接触,或者触及某些人的利益最终未能成行
     *
     *       最后的贡献也是设计了的生意贷风控系统模型(此处的模型区别上述说的模型,上边的jar规则包,这个里是领域domain),然后进行落地,把部分业务进行了迁移
     *          https://hailiang.feishu.cn/wiki/wikcnFrw18sxK2aqLQ3zjRwSCxh
     *
     *       核心:使用领域驱动设计,总结了核心领域模型,就是订单,围绕订单模型,有数据加工模型,和授信模型(模型跑出来的结果),最后落地了新的风控系统,
     *           去除原来的责任链的模型,采用简单策略模式,简单易读(可读性也是金融系统的非常重要的指标,因为稳定大于一切,宁可不做也不做错)

     *     D: 日常迭代如何保证系统的高可用?
     *       变更三板斧: 可灰度,可监控,可应急
     *         可灰度:核心逻辑或者主链路代码的变更,新老逻辑要分开,使用白名单+灰度百分比的方式,发布时候还会在预发环境,和生产每个机房beta2台机器,进行灰度验证,最后逐步灰度上线
     *         可监控:上线之前,配置对应的自定义监控,在灰度过程中,要求所有的变更都可以通过实施日志和自定义监控进行观察和验证,否则业务变更就抓瞎了
     *         可应急:具体来说就是可回滚,在所有变更过程中,主要出现不符合预期的问题或者问题不明的问题,第一操作永远都是回滚(代码的话就切掉beta机器,模型的就配置项回滚到上一个版本,配置的话就回滚DRM到默认值,让业务走老逻辑)
     *
     *
     * 三.30%系统的稳定性建设(高可用(容灾等),高并发,高性能),比如一键熔断,一键降级,一键切数据库集群副本库等
     *      <特点:技术性强,安全要求高>
     *         除了分布式,负载均衡,灰度发布,监控预警,搞性能的中间件和dataBase等数据存储介质等互联网通用能力,我们就不展开讲了,我么重点讲一下
     *      E: 数据库集群挂了,如何确保业务不跌零,可用率大于50%?
     *          把数据写入源分为实时和离线两部分
     *
     *          实时(业务系统写入的):10库100表在一个OB集群,现在分散到10个集群上,每个集群仅存一个库,这个样集群怪最多影响10%
     *          离线(离线SQL同步的):离线同步到实时库时候同步两份到两个集群,流量50%均分到这两个集群,一个集群挂了,预警出来,分钟级切换手动切换到另一个集群(去年12月产生了一次作用,和买保险一样)
     *          难点:思路很清晰也很简单,难点在于如何在日均4wQPS一秒不停服的前提下把所有数据挪动到别的集群上去?
     *          做法: 双写,灰度,回滚
     *                 1.初始化同步数据单向(小时级),A集群到B集群之间有延迟,流量打到A集群上,以A集群返回为准
     *                 2.选择夜晚1点业务低峰期,QPS降低上千级别,开启双向同步且强一致(分钟级),此时要求主副本和备副本都同步完成,业务才返回,此时会有牺牲一定的耗时(交易增加100ms左右),但是可以接受
     *                 3.流量灰度切换过去,1%,3%,5%,10%,以后隔天切10%过去,次日观察业务是否正常,有问题就回切,没问题就继续切,直到100%,前后耗时2个月
     *
     *      F:网商贷离线任务高效运维?
     *      <特点:任务多,业务复杂,影响面广,运维成本高>
     *          离线任务:离线大数据每天T+1产出的授信相关指标数据,比如离线授信要素,黑名单等,网商贷背后在180多(20年10月)左右离线任务
     *          痛点:
     *          离线任务失败频率高
     *              (1)每日任务产出不定时,产出任务失败数多,需要人工处理(波动率高,上游产出失败,上游产出延迟,任务失败需要重试等等)
     *              (2)我从18年接手所有没离线任务运维后,就发现了上述问题,每次都需要找对应上游的人进行处理,其实只有超时等问题我们可以重试,其他都需要找对应节点负责人进行处理
     *              解决: 我们和借呗团队蔡华学合作,进行共建风铃平台,主要思路是机器人自动巡检,任务节点失败后,用阿里云API获取到上游失败节点详细信,然后钉钉机器人自动预警给对应的节点负责人,进行限时处理
     *          离线任务产出慢:<申请了2项专利>
     *              (1)日内内节点实例有上下游依赖,这些依赖中很大一部分,通过内部分析业务和数据,发现是可以去除,也就是从串行改并行的
     *              (2)日间节点依赖,很多也配置了T之间的依赖,其实这个有很大一部分,尤其是几个核心模型是没有必要的,去除这个依赖就可以做到日间并行跑,并且跑出的结果最后还可以到实施再验证一道,还有AB模型的切换机制等等一系列安全手段
     *              (3)去除无效依赖,很多模型的上游依赖,随着模型的迭代,已经不需要了,可以直接去除,来增加离线任务的性能,就像java代码引入一个包,结果代码已经删除了,结果导入没有删除
     *              (4)当然就是增加离线计算资源,用钱来买,这个其实是效果最明显的,但是每个bu财年预算有限,我么还是要在有限的资源内做最大化的利用
     *          最后就是监控:
     *          还记得我么前边说的实施模型AB机制灰度监控么,这个配置上可以看出当前运行的PT,当然就可以做一个监控,来显示所的任务离线产出的延迟情况,从而用风铃系统来来发起预警
     *
     *
     *
     */


    /**
     *
     * 问题咨询:
     * 1.目前的风控业务的客户量级,年度越规模多少,不良率,QPS量级
     * 2.目前风控团队的规模如何,主要由哪些人员构成?
     *  花呗,借呗, 商务服务;
     *
     * 3.目前业务上遇到的普遍最大的难点是什么,整体解决的思路是什么?
     *
     * 4.目前增长遇到的最大难点是什么,整体解决的思路是什么?
     * 5.目前是否有业务架构师这个角色存在,他的主要职能是什么
     * 6.目前系统稳定性建设的基本要求是怎样的?
     */
}